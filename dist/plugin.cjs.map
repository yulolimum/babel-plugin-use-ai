{"version":3,"sources":["../src/cache.ts","../src/sync-http.ts","../src/code-generator.ts","../src/prompt-builder.ts","../src/plugin.ts"],"names":["path","fs","crypto","execSync","require","createRequire","t"],"mappings":"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","file":"plugin.cjs","sourcesContent":["import crypto from \"node:crypto\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport type { Metadata } from \"./prompt-builder\";\n\nexport interface CacheEntry {\n\tsignature: string;\n\tmetadata: Metadata;\n\tgeneratedCode: string;\n\ttimestamp: number;\n}\n\nexport interface Cache {\n\t[key: string]: CacheEntry;\n}\n\nexport class FunctionCache {\n\tprivate cachePath: string;\n\tprivate cache: Cache;\n\n\tconstructor(cacheFilePath: string = \".ai-cache.json\") {\n\t\tthis.cachePath = path.resolve(process.cwd(), cacheFilePath);\n\t\tthis.cache = this.loadCache();\n\t}\n\n\tprivate loadCache(): Cache {\n\t\ttry {\n\t\t\tif (fs.existsSync(this.cachePath)) {\n\t\t\t\tconst data = fs.readFileSync(this.cachePath, \"utf-8\");\n\t\t\t\treturn JSON.parse(data);\n\t\t\t}\n\t\t} catch (_error) {}\n\t\treturn {};\n\t}\n\n\tprivate saveCache(): void {\n\t\ttry {\n\t\t\tfs.writeFileSync(\n\t\t\t\tthis.cachePath,\n\t\t\t\tJSON.stringify(this.cache, null, 2),\n\t\t\t\t\"utf-8\",\n\t\t\t);\n\t\t} catch (_error) {}\n\t}\n\n\tprivate generateKey(signature: string, metadata: Metadata): string {\n\t\tconst data = JSON.stringify({ signature, metadata });\n\t\treturn crypto.createHash(\"sha256\").update(data).digest(\"hex\");\n\t}\n\n\tget(signature: string, metadata: Metadata): string | null {\n\t\tconst key = this.generateKey(signature, metadata);\n\t\tconst entry = this.cache[key];\n\n\t\tif (entry) {\n\t\t\treturn entry.generatedCode;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tset(signature: string, metadata: Metadata, generatedCode: string): void {\n\t\tconst key = this.generateKey(signature, metadata);\n\t\tthis.cache[key] = {\n\t\t\tsignature,\n\t\t\tmetadata,\n\t\t\tgeneratedCode,\n\t\t\ttimestamp: Date.now(),\n\t\t};\n\t\tthis.saveCache();\n\t}\n\n\tclear(): void {\n\t\tthis.cache = {};\n\t\tthis.saveCache();\n\t}\n\n\tsize(): number {\n\t\treturn Object.keys(this.cache).length;\n\t}\n}\n","import { execSync } from \"node:child_process\";\n\nexport interface SyncHttpOptions {\n\tmethod: string;\n\theaders: Record<string, string>;\n\tbody?: string;\n}\n\nexport function syncHttpRequest(url: string, options: SyncHttpOptions): string {\n\tconst { method, headers, body } = options;\n\n\t// Build curl command\n\tconst headerArgs = Object.entries(headers)\n\t\t.map(([key, value]) => `-H \"${key}: ${value}\"`)\n\t\t.join(\" \");\n\n\tconst bodyArg = body ? `-d '${body.replace(/'/g, \"'\\\\''\")}'` : \"\";\n\n\tconst curlCommand = `curl -s -X ${method} \"${url}\" ${headerArgs} ${bodyArg}`;\n\n\ttry {\n\t\tconst response = execSync(curlCommand, {\n\t\t\tencoding: \"utf-8\",\n\t\t\tmaxBuffer: 10 * 1024 * 1024, // 10MB buffer\n\t\t});\n\t\treturn response;\n\t} catch (error) {\n\t\tthrow new Error(\n\t\t\t`Sync HTTP request failed: ${error instanceof Error ? error.message : String(error)}`,\n\t\t);\n\t}\n}\n","import type { FunctionCache } from \"./cache\";\nimport type { Metadata } from \"./prompt-builder\";\nimport { syncHttpRequest } from \"./sync-http\";\n\nexport function generateFunctionBody(\n\tprompt: string,\n\tmetadata: Metadata,\n\tapiKey: string,\n\tcache: FunctionCache,\n\tfunctionSignature: string,\n): string {\n\tconst cached = cache.get(functionSignature, metadata);\n\tif (cached) {\n\t\treturn cached;\n\t}\n\n\tconst model = metadata.model || \"openai/gpt-4-turbo\";\n\tconst requestBody: Record<string, any> = {\n\t\tmodel,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: \"user\",\n\t\t\t\tcontent: prompt,\n\t\t\t},\n\t\t],\n\t\ttemperature: metadata.temperature ?? 0.7,\n\t};\n\n\tif (metadata.seed !== undefined) {\n\t\trequestBody.seed = metadata.seed;\n\t}\n\n\tconst response = syncHttpRequest(\n\t\t\"https://openrouter.ai/api/v1/chat/completions\",\n\t\t{\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\tAuthorization: `Bearer ${apiKey}`,\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t\"HTTP-Referer\": \"https://github.com/yulolimum/babel-plugin-use-ai\",\n\t\t\t\t\"X-Title\": \"babel-plugin-use-ai\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(requestBody),\n\t\t},\n\t);\n\n\tconst data = JSON.parse(response);\n\n\tif (!data.choices?.[0]?.message?.content) {\n\t\tthrow new Error(\n\t\t\t`Invalid response from OpenRouter API: ${JSON.stringify(data)}`,\n\t\t);\n\t}\n\n\tconst generatedCode = data.choices[0].message.content.trim();\n\tcache.set(functionSignature, metadata, generatedCode);\n\n\treturn generatedCode;\n}\n","export interface Metadata {\n\ttemperature?: number;\n\tseed?: number;\n\tinstructions?: string;\n\tmodel?: string;\n}\n\nexport function buildPrompt(\n\tfunctionCode: string,\n\tmetadata: Metadata = {},\n): string {\n\tconst basePrompt = `You are a code generation assistant. Generate a function body for the following function:\n\n${functionCode}\n\nRequirements:\n- Implement the function according to its name (if it exists) and type signature\n- The function name describes what it should do. If the function name is not provided, infer the purpose from the parameters, type, and/or instructions.\n  - If you have no idea what the function is suppose to do, throw an error with the message \"Babel Use-AI: Unable to infer function purpose\".\n- Must return the correct type (use 'return' statement for non-void functions)\n- No side effects unless implied by the name\n- Valid TypeScript/JavaScript\n- No comments in the generated code\n- No console.log or debugging statements\n\n${metadata.instructions ? `Additional instructions: ${metadata.instructions}` : \"\"}\n\nGenerate ONLY the function body code (no outer braces, no function declaration).\nDO NOT wrap your response in code blocks (no \\`\\`\\`typescript, \\`\\`\\`javascript, or \\`\\`\\`).\nReturn raw code only.\n\nExamples for different function types:\n\n1. Function Declaration:\n   function add(a, b) { ... }\n   Body: return a + b;\n\n2. Function Expression:\n   const add = function(a, b) { ... }\n   Body: return a + b;\n\n3. Arrow Function:\n   const add = (a, b) => { ... }\n   Body: return a + b;\n\n4. Object Method:\n   { add(a, b) { ... } }\n   Body: return a + b;\n\n5. Void function (no return needed):\n   function log(msg) { ... }\n   Body: console.log(msg);\n\nCRITICAL: All non-void functions MUST include 'return' statement.`;\n\n\t// console.info(\"Generated prompt:\\n\", basePrompt);\n\n\treturn basePrompt;\n}\n\nexport function extractMetadata(leadingComments: any[] | undefined): Metadata {\n\tif (!leadingComments || leadingComments.length === 0) {\n\t\treturn {};\n\t}\n\n\tconst lastComment = leadingComments[leadingComments.length - 1];\n\tconst commentText = lastComment.value;\n\n\tconst metadataMatch = commentText.match(/@ai\\s+(.+)/);\n\tif (!metadataMatch) {\n\t\treturn {};\n\t}\n\n\tconst metadata: Metadata = {};\n\tconst pairs = metadataMatch[1].split(\",\").map((s: string) => s.trim());\n\n\tfor (const pair of pairs) {\n\t\tconst [key, value] = pair.split(\"=\").map((s: string) => s.trim());\n\t\tif (key === \"temperature\" || key === \"seed\") {\n\t\t\tmetadata[key as keyof Metadata] = Number.isNaN(Number(value))\n\t\t\t\t? (value as any)\n\t\t\t\t: parseFloat(value);\n\t\t} else if (key === \"instructions\") {\n\t\t\tmetadata.instructions = value.replace(/^[\"']|[\"']$/g, \"\");\n\t\t} else if (key === \"model\") {\n\t\t\tmetadata.model = value;\n\t\t}\n\t}\n\n\treturn metadata;\n}\n","import { createRequire } from \"node:module\";\nimport generate from \"@babel/generator\";\nimport type { NodePath } from \"@babel/traverse\";\nimport * as t from \"@babel/types\";\nimport { FunctionCache } from \"./cache\";\nimport { generateFunctionBody } from \"./code-generator\";\nimport type { Metadata } from \"./prompt-builder\";\nimport { buildPrompt } from \"./prompt-builder\";\n\nconst require = createRequire(import.meta.url);\n\nexport interface PluginOptions {\n\tapiKey?: string;\n\tmodel?: string;\n\ttemperature?: number;\n}\n\nexport default function babelPluginUseAi(\n\t_babelApi: any,\n\toptions: PluginOptions = {},\n) {\n\tconst apiKey = options.apiKey || process.env.OPENROUTER_API_KEY;\n\tif (!apiKey) {\n\t\tthrow new Error(\n\t\t\t\"babel-plugin-use-ai: apiKey is required. Pass it via options or set OPENROUTER_API_KEY environment variable.\",\n\t\t);\n\t}\n\n\tconst pluginOptions = {\n\t\tapiKey,\n\t\tmodel: options.model || \"openai/gpt-4-turbo\",\n\t\ttemperature: options.temperature ?? 0.7,\n\t};\n\n\tconst cache = new FunctionCache();\n\n\treturn {\n\t\tname: \"babel-plugin-use-ai\",\n\t\tvisitor: {\n\t\t\tFunctionExpression(path: NodePath<t.FunctionExpression>) {\n\t\t\t\t// console.info(\"FunctionExpression\", path.node)\n\t\t\t\tconst body = path.node.body;\n\t\t\t\tconst parentPath = path.parentPath;\n\t\t\t\tconst sourceString = parentPath?.getSource();\n\n\t\t\t\tlet fallbackSourceString = \"\";\n\n\t\t\t\tconst startLOC = path.node.loc?.start;\n\t\t\t\tconst endLOC = path.node.loc?.end;\n\n\t\t\t\tconst code = path.hub.getCode();\n\n\t\t\t\tif (startLOC && endLOC && code) {\n\t\t\t\t\tconst codeLines = code.split(\"\\n\");\n\t\t\t\t\tconst extractedLines = codeLines.slice(\n\t\t\t\t\t\tstartLOC.line - 1,\n\t\t\t\t\t\tendLOC.line,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (extractedLines.length > 0) {\n\t\t\t\t\t\textractedLines[0] = extractedLines[0].slice(startLOC.column);\n\t\t\t\t\t\textractedLines[extractedLines.length - 1] = extractedLines[\n\t\t\t\t\t\t\textractedLines.length - 1\n\t\t\t\t\t\t].slice(0, endLOC.column);\n\t\t\t\t\t\tfallbackSourceString = extractedLines.join(\"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!body) return;\n\t\t\t\tif (!sourceString && !fallbackSourceString) return;\n\t\t\t\tif (!hasUseAiDirective(body)) return;\n\n\t\t\t\tconst metadata = extractMetadataFromDirective(body);\n\n\t\t\t\tprocessUseAiDirective(\n\t\t\t\t\t{\n\t\t\t\t\t\tbody,\n\t\t\t\t\t\tsourceString: sourceString || fallbackSourceString,\n\t\t\t\t\t\tmetadata,\n\t\t\t\t\t},\n\t\t\t\t\tpluginOptions as Required<PluginOptions>,\n\t\t\t\t\tcache,\n\t\t\t\t);\n\t\t\t},\n\t\t\tArrowFunctionExpression(path: NodePath<t.ArrowFunctionExpression>) {\n\t\t\t\t// console.info(\"ArrowFunctionExpression\", path.node)\n\t\t\t\tconst body = path.node.body;\n\t\t\t\tconst parentPath = path.parentPath.parentPath;\n\t\t\t\tconst sourceString = parentPath?.getSource();\n\n\t\t\t\tif (!body) return;\n\t\t\t\tif (!t.isBlockStatement(body)) return;\n\t\t\t\tif (!sourceString) return;\n\t\t\t\tif (!hasUseAiDirective(body)) return;\n\n\t\t\t\tconst metadata = extractMetadataFromDirective(body);\n\n\t\t\t\tprocessUseAiDirective(\n\t\t\t\t\t{ body, sourceString, metadata },\n\t\t\t\t\tpluginOptions as Required<PluginOptions>,\n\t\t\t\t\tcache,\n\t\t\t\t);\n\t\t\t},\n\t\t\tObjectMethod(path: NodePath<t.ObjectMethod>) {\n\t\t\t\t// console.info(\"ObjectMethod\", path.node)\n\t\t\t\tconst body = path.node.body;\n\t\t\t\tconst sourceString = path.getSource();\n\n\t\t\t\tif (!body) return;\n\t\t\t\tif (!sourceString) return;\n\t\t\t\tif (!hasUseAiDirective(body)) return;\n\n\t\t\t\tconst metadata = extractMetadataFromDirective(body);\n\n\t\t\t\tprocessUseAiDirective(\n\t\t\t\t\t{ body, sourceString, metadata },\n\t\t\t\t\tpluginOptions as Required<PluginOptions>,\n\t\t\t\t\tcache,\n\t\t\t\t);\n\t\t\t},\n\t\t\tFunctionDeclaration(path: NodePath<t.FunctionDeclaration>) {\n\t\t\t\t// console.info(\"FunctionDeclaration\", path.node)\n\t\t\t\tconst body = path.node.body;\n\t\t\t\tconst sourceString = path.getSource();\n\n\t\t\t\tif (!body) return;\n\t\t\t\tif (!sourceString) return;\n\t\t\t\tif (!hasUseAiDirective(body)) return;\n\n\t\t\t\tconst metadata = extractMetadataFromDirective(body);\n\n\t\t\t\tprocessUseAiDirective(\n\t\t\t\t\t{ body, sourceString, metadata },\n\t\t\t\t\tpluginOptions as Required<PluginOptions>,\n\t\t\t\t\tcache,\n\t\t\t\t);\n\t\t\t},\n\t\t},\n\t};\n}\n\nfunction hasUseAiDirective(body: t.BlockStatement): boolean {\n\tif (!body?.directives || body.directives.length === 0) return false;\n\n\treturn body.directives.some(\n\t\t(directive) => (directive as any).value.value === \"use ai\",\n\t);\n}\n\nfunction extractMetadataFromDirective(body: t.BlockStatement): Metadata {\n\tif (!body || !body.body || body.body.length === 0) {\n\t\treturn {};\n\t}\n\n\tconst firstStatement = body.body[0];\n\tif (!firstStatement || !firstStatement.leadingComments) {\n\t\treturn {};\n\t}\n\n\tconst metadata: Metadata = {};\n\n\tfor (const comment of firstStatement.leadingComments) {\n\t\tconst commentText = comment.value.trim();\n\t\tconst match = commentText.match(/^\\s*(\\w+)\\s*=\\s*(.+)$/);\n\n\t\tif (!match) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst [, key, rawValue] = match;\n\t\tconst value = rawValue.trim().replace(/^[\"']|[\"']$/g, \"\");\n\n\t\tif (key === \"temperature\" || key === \"seed\") {\n\t\t\tmetadata[key as keyof Metadata] = Number.isNaN(Number(value))\n\t\t\t\t? (value as any)\n\t\t\t\t: parseFloat(value);\n\t\t} else if (key === \"instructions\") {\n\t\t\tmetadata.instructions = value;\n\t\t} else if (key === \"model\") {\n\t\t\tmetadata.model = value;\n\t\t}\n\t}\n\n\treturn metadata;\n}\n\nfunction processUseAiDirective(\n\tinfo: {\n\t\tbody: t.BlockStatement;\n\t\tsourceString: string;\n\t\tmetadata: Metadata;\n\t},\n\tpluginOptions: Required<PluginOptions>,\n\tcache: FunctionCache,\n): void {\n\tconst { body, sourceString, metadata } = info;\n\n\tconst mergedMetadata: Metadata = {\n\t\t...metadata,\n\t\tmodel: metadata.model || pluginOptions.model,\n\t\ttemperature: metadata.temperature ?? pluginOptions.temperature,\n\t};\n\n\tconst prompt = buildPrompt(sourceString, mergedMetadata);\n\tlet generatedBody = generateFunctionBody(\n\t\tprompt,\n\t\tmergedMetadata,\n\t\tpluginOptions.apiKey,\n\t\tcache,\n\t\tsourceString,\n\t);\n\n\tgeneratedBody = generatedBody\n\t\t.replace(/```(?:typescript|javascript|ts|js)?\\n?/g, \"\")\n\t\t.replace(/```\\n?/g, \"\");\n\n\tconst bodyAst = parseBodyToAst(generatedBody);\n\tbody.body = bodyAst;\n\tbody.directives = [];\n}\n\nfunction parseBodyToAst(bodyString: string): t.Statement[] {\n\tconst parser = require(\"@babel/parser\");\n\tconst ast = parser.parse(`(function() { ${bodyString} })`, {\n\t\tsourceType: \"module\",\n\t\tplugins: [\"typescript\"],\n\t});\n\n\tconst functionExpr = ast.program.body[0].expression;\n\tconst blockStatement = functionExpr.body;\n\n\treturn blockStatement.body;\n}\n"]}